# -*- coding: utf-8 -*-
"""transformer .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KYKMnE6iz1akiQDa1Q3HDn3_4gPd8VGY

# Libraries
"""

!pip install transformers

!pip install datasets

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
import torch.nn.functional as F

"""# Code

## Attention layer
"""

class Attention_Layer(nn.Module):
    """
    The Attention Layer
    """
    def __init__(self, embedding_size, head_num=2, use_res=True, scaling=False, seed=1024, device='cpu'):
        super(Attention_Layer, self).__init__()
        if head_num <= 0:
            raise ValueError('head_num must be a int > 0')
        if embedding_size % head_num != 0:
            raise ValueError('embedding_size is not an integer multiple of head_num!')
        self.att_embedding_size = embedding_size // head_num
        self.head_num = head_num
        self.use_res = use_res
        self.scaling = scaling
        self.seed = seed

        self.W_Query = nn.Parameter(torch.Tensor(embedding_size, embedding_size))
        self.W_key = nn.Parameter(torch.Tensor(embedding_size, embedding_size))
        self.W_Value = nn.Parameter(torch.Tensor(embedding_size, embedding_size))

        if self.use_res:
            self.W_Res = nn.Parameter(torch.Tensor(embedding_size, embedding_size))
        for tensor in self.parameters():
            nn.init.normal_(tensor, mean=0.0, std=0.05)

        self.to(device)

    def forward(self, inputs):

        if len(inputs.shape) != 3:
            raise ValueError(
                "Unexpected inputs dimensions %d, expect to be 3 dimensions" % (len(inputs.shape)))

        # None F D
        querys = torch.tensordot(inputs, self.W_Query, dims=([-1], [0]))
        keys = torch.tensordot(inputs, self.W_key, dims=([-1], [0]))
        values = torch.tensordot(inputs, self.W_Value, dims=([-1], [0]))

        # head_num None F D/head_num
        querys = torch.stack(torch.split(querys, self.att_embedding_size, dim=2))
        keys = torch.stack(torch.split(keys, self.att_embedding_size, dim=2))
        values = torch.stack(torch.split(values, self.att_embedding_size, dim=2))

        inner_product = torch.einsum('bnik,bnjk->bnij', querys, keys)  # head_num None F F
        if self.scaling:
            inner_product /= self.att_embedding_size ** 0.5
        self.normalized_att_scores = F.softmax(inner_product, dim=-1)  # head_num None F F
        result = torch.matmul(self.normalized_att_scores, values)  # head_num None F D/head_num

        result = torch.cat(torch.split(result, 1, ), dim=-1)
        result = torch.squeeze(result, dim=0)  # None F D
        if self.use_res:
            result += torch.tensordot(inputs, self.W_Res, dims=([-1], [0]))
        result = F.relu(result)

        return result



class MultiHeadAttention(nn.Module):
    """
    The Attention Layer
    """
    def __init__(self, emb_k, num_heads):
        super(MultiHeadAttention, self).__init__()
        assert emb_k % num_heads == 0 # emb_k must divitable by num of heads
        self.d_k = emb_k // num_heads
        self.num_heads = num_heads
        self.emb_k = emb_k

        self.WQ = nn.Linear(emb_k, emb_k)
        self.WK = nn.Linear(emb_k, emb_k)
        self.WV = nn.Linear(emb_k, emb_k)
        self.WO = nn.Linear(emb_k, emb_k)

    def scaled_dot_product_attention(self, Q, K, V, mask=None):
        atten_scores = torch.matmul(Q, K.transpose(-2, -1)) / (self.d_k ** 0.5)
        if mask is not None:
            atten_scores = atten_scores.masked_fill(mask == 0 -1e9)
        atten_probs = F.softmax(atten_scores, dim=-1)
        output = torch.matmul(atten_probs, V)
        return output

    def split_heads(self, x):
        batch_size, seq_length, emb_k = x.size()
        x = x.view(batch_size, -1, self.num_heads, self.d_k)
        return x.transpose(1, 2)

    def combine_heads(self, x):
        batch_size, num_heads, seq_length, d_k = x.size()
        x = x.transpose(1, 2).contiguous().view(batch_size, -1, self.emb_k)
        return x

    def forward(self, x_Q, x_K, x_V, mask=None):  # for self-attention x_Q, x_K, x_V are the same
        Q = self.split_heads(self.WQ(x_Q))
        K = self.split_heads(self.WK(x_K))
        V = self.split_heads(self.WV(x_V))

        attn_output = self.scaled_dot_product_attention(Q, K, V, mask)
        attn_output = self.WO(self.combine_heads(attn_output))
        return attn_output

"""## FeedForward

"""

class PositionWiseFeedForward(nn.Module):
    def __init__(self, emb_k, d_inter, dropout=0.1):
        super(PositionWiseFeedForward, self).__init__()
        self.fc1 = nn.Linear(emb_k, d_inter)
        self.fc2 = nn.Linear(d_inter, emb_k)
        self.dropout = nn.Dropout(dropout)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        return x

"""## Position encoding

"""

import math
class PositionEncoding(nn.Module):
    def __init__(self, max_seq_len, emb_k):
        super(PositionEncoding, self).__init__()
        self.max_seq_len = max_seq_len
        self.emb_k = emb_k
        pe = torch.zeros(max_seq_len, emb_k)
        position = torch.arange(0, max_seq_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, emb_k, 2).float() * (-math.log(10000.0) / emb_k))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        self.register_buffer('pe', pe.unsqueeze(0)) ## buffers are parameters which will NOT be trained and updated
        ## position encoding index are set to buffers independant of training

    def forward(self, x):
        x = x + self.pe[:, :x.size(1)]
        return x

"""## Encoder"""

class EncoderLayer(nn.Module):
    def __init__(self, emb_k, num_heads, d_inter, dropout=0.1):
        super(EncoderLayer, self).__init__()
        self.self_attn = MultiHeadAttention(emb_k, num_heads, dropout)
        self.feed_forward = PositionWiseFeedForward(emb_k, d_inter, dropout)

        self.norm1 = nn.LayerNorm(emb_k)
        self.norm2 = nn.LayerNorm(emb_k)
        self.dropout1 = nn.Dropout(dropout)


    def forward(self, x, mask):
        attn_output = self.self_attn(x, x, x, mask)
        x = self.norm1(x + self.dropout1(attn_output))
        ffn_output = self.feed_forward(x)
        x = self.norm2(x + self.dropout1(ffn_output))
        return x

"""## Decoder"""

class DecoderLayer(nn.Module):
    def __init__(self, emb_k, num_heads, d_inter, dropout=0.1):
        super(DecoderLayer, self).__init__()
        self.self_attn = MultiHeadAttention(emb_k, num_heads, dropout)
        self.cross_attn = MultiHeadAttention(emb_k, num_heads, dropout)
        self.feed_forward = PositionWiseFeedForward(emb_k, d_inter, dropout)

        self.norm1 = nn.LayerNorm(emb_k)
        self.norm2 = nn.LayerNorm(emb_k)
        self.norm3 = nn.LayerNorm(emb_k)
        self.dropout1 = nn.Dropout(dropout)


    def forward(self, x, enc_output, cross_mask, tgt_mask):
        attn_output = self.self_attn(x, x, x, tgt_mask)
        x = self.norm1(x + self.dropout1(attn_output))
        attn_output = self.cross_attn(x, enc_output, enc_output, cross_mask)
        x = self.norm2(x + self.dropout1(attn_output))
        ffn_output = self.feed_forward(x)
        x = self.norm3(x + self.dropout1(ffn_output))
        return x

"""## Transformer"""

class TransFormer(nn.Module):
    def __init__(self, src_vocab_size, tgt_vocab_size,emb_k, num_heads,
                 num_enc_layers, num_dec_layers, d_inter, max_seq_len, dropout=0.1):
        super(TransFormer, self).__init__()
        self.encoder_embed = nn.Embedding(src_vocab_size, emb_k)
        self.decoder_embed = nn.Embedding(tgt_vocab_size, emb_k)
        self.pos_enc = PositionEncoding(max_seq_len, emb_k)

        self.encoder = nn.ModuleList([EncoderLayer(emb_k, num_heads, d_inter, dropout) for _ in range(num_enc_layers)])
        self.decoder = nn.ModuleList([DecoderLayer(emb_k, num_heads, d_inter, dropout) for _ in range(num_dec_layers)])
        self.RC = nn.Linear(emb_k, tgt_vocab_size)
        self.dropout = nn.Dropout(dropout)

    def generate_square_subsequent_mask(self, src,tgt):
        src_mask = (src != 0).unsqueeze(1).unsqueeze(2)
        tgt_mask = (tgt != 0).unsqueeze(1).unsqueeze(3)
        seq_len = tgt.size(1)
        nopeak_mask = (1 - torch.triu(torch.ones(1, seq_len, seq_len), diagonal=1)).bool()
        tgt_mask = tgt_mask & nopeak_mask
        return src_mask, tgt_mask

    def forward(self, src, tgt, src_mask, tgt_mask):
        x = self.embed(src)
        x = self.pos_enc(x)
        enc_output = self.encoder(x, src_mask)
        x = self.embed(tgt)
        x = self.pos_enc(x)
        dec_output = self.decoder(x, enc_output, src_mask, tgt_mask)
        output = self.RC(dec_output)
        return output